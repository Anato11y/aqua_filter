import 'package:flutter/material.dart';
import 'package:aqua_filter/models/product_model.dart';
import 'package:provider/provider.dart';
import 'package:aqua_filter/providers/cart_provider.dart';

class ProductCard extends StatefulWidget {
  final Product product;
  final VoidCallback onTap;

  /// –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É ¬´–í –∫–æ—Ä–∑–∏–Ω—É¬ª
  final bool hideCartButton;

  const ProductCard({
    super.key,
    required this.product,
    required this.onTap,
    this.hideCartButton = false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–Ω–æ–ø–∫–∞ –Ω–µ —Å–∫—Ä—ã—Ç–∞
  });

  @override
  ProductCardState createState() => ProductCardState();
}

class ProductCardState extends State<ProductCard> {
  int quantity = 0; // üîπ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final cartProvider = Provider.of<CartProvider>(context, listen: false);
    quantity = (cartProvider.items[widget.product.id]?['quantity'] ?? 0) as int;
  }

  /// ‚úÖ –ú–µ—Ç–æ–¥ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  void _decreaseQuantity() {
    if (quantity > 0) {
      setState(() => quantity--);
      final cartProvider = Provider.of<CartProvider>(context, listen: false);
      cartProvider.removeItem(widget.product.id);
    }
  }

  /// ‚úÖ –ú–µ—Ç–æ–¥ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  void _increaseQuantity() {
    setState(() => quantity++);
    final cartProvider = Provider.of<CartProvider>(context, listen: false);
    cartProvider.addItem(widget.product, 1);
  }

  @override
  Widget build(BuildContext context) {
    // –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã, —á—Ç–æ–±—ã —Å—á–µ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª—è–ª—Å—è
    Provider.of<CartProvider>(context);

    return GestureDetector(
      onTap: widget.onTap,
      child: Card(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        elevation: 4,
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
              ClipRRect(
                borderRadius:
                    const BorderRadius.vertical(top: Radius.circular(12)),
                child: AspectRatio(
                  aspectRatio: 10 / 8,
                  child: Container(
                    color: Colors.white,
                    child: widget.product.imageUrl.isNotEmpty
                        ? Image.network(
                            widget.product.imageUrl,
                            fit: BoxFit.contain,
                            errorBuilder: (context, error, stackTrace) =>
                                const Center(child: Text('–û—à–∏–±–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')),
                          )
                        : const Center(child: Text('–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')),
                  ),
                ),
              ),
              const SizedBox(height: 8),
              // –ù–∞–∑–≤–∞–Ω–∏–µ
              Text(
                widget.product.name,
                style:
                    const TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
                maxLines: 3,
                overflow: TextOverflow.ellipsis,
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 8),
              // –¶–µ–Ω–∞
              Text(
                '${widget.product.price.toStringAsFixed(2)} ‚ÇΩ',
                style: const TextStyle(fontSize: 16, color: Colors.green),
              ),
              const SizedBox(height: 8),

              // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∞
              if (widget.hideCartButton) ...[
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´–í –∫–æ—Ä–∑–∏–Ω–µ¬ª, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
                if (quantity > 0)
                  const Text(
                    '–í –∫–æ—Ä–∑–∏–Ω–µ',
                    style: TextStyle(fontSize: 16, color: Colors.red),
                  )
                else
                  const SizedBox(), // –ü—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ
              ] else ...[
                // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∏ —Å—á–µ—Ç—á–∏–∫–æ–º
                if (quantity > 0)
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      IconButton(
                        onPressed: _decreaseQuantity,
                        icon: const Icon(Icons.remove, color: Colors.red),
                      ),
                      Text(
                        '$quantity',
                        style: const TextStyle(fontSize: 18),
                      ),
                      IconButton(
                        onPressed: _increaseQuantity,
                        icon: const Icon(Icons.add, color: Colors.green),
                      ),
                    ],
                  )
                else
                  ElevatedButton(
                    onPressed: _increaseQuantity,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blueAccent,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    child: const Text(
                      '–í –ö–û–†–ó–ò–ù–£',
                      style: TextStyle(color: Colors.white),
                    ),
                  ),
              ],
            ],
          ),
        ),
      ),
    );
  }
}
