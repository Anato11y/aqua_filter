import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:aqua_filter/providers/cart_provider.dart';

class CheckoutScreen extends StatefulWidget {
  const CheckoutScreen({super.key});

  @override
  CheckoutScreenState createState() => CheckoutScreenState();
}

class CheckoutScreenState extends State<CheckoutScreen> {
  final _formKey = GlobalKey<FormState>();
  String _name = '';
  String _phone = '';
  String _address = '';

  /// ‚úÖ –ú–µ—Ç–æ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (—Ç–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –∏–¥—É—Ç –≤ `orders`)
  Future<void> _submitOrder(BuildContext context) async {
    final cartProvider = Provider.of<CartProvider>(context, listen: false);
    final user = FirebaseAuth.instance.currentUser;

    if (user == null) {
      // ‚ùå –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
      Navigator.pushReplacementNamed(context, '/login');
      return;
    }

    if (!_formKey.currentState!.validate()) return;
    _formKey.currentState!.save();

    // üîπ –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
    double totalAmount = cartProvider.totalAmount;
    double bonusEarned = totalAmount * 0.05; // 5% –±–æ–Ω—É—Å–æ–≤

    // üîπ –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    Map<String, dynamic> orderData = {
      'userId': user.uid,
      'name': _name, // ‚úÖ –¢–µ–ø–µ—Ä—å –∏–º—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
      'phone': _phone,
      'address': _address,
      'totalAmount': totalAmount,
      'bonusEarned': bonusEarned,
      'date': FieldValue.serverTimestamp(),
      'items': cartProvider.items.entries.map((entry) {
        return {
          'productId': entry.key,
          'name': entry.value['product'].name,
          'price': entry.value['product'].price,
          'quantity': entry.value['quantity'],
        };
      }).toList(),
    };

    try {
      // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ `orders`
      final orderRef =
          await FirebaseFirestore.instance.collection('orders').add(orderData);
      print('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ orders/${orderRef.id}');

      // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ `users`
      final userRef =
          FirebaseFirestore.instance.collection('users').doc(user.uid);
      await userRef.set({
        'bonusBalance': FieldValue.increment(bonusEarned),
      }, SetOptions(merge: true));

      print('‚úÖ –ë–æ–Ω—É—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: +$bonusEarned');

      // üîπ –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
      cartProvider.clearCart();

      // üîπ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!')),
      );

      // üîπ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      Navigator.pop(context);
    } catch (e) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: $e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final cartProvider = Provider.of<CartProvider>(context);

    return Scaffold(
      appBar: AppBar(
        title: const Text('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
            style: TextStyle(color: Colors.white)),
        backgroundColor: Colors.blueAccent,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '–í–∞—à –∑–∞–∫–∞–∑:',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            Expanded(
              child: ListView.builder(
                itemCount: cartProvider.items.length,
                itemBuilder: (context, index) {
                  final productId = cartProvider.items.keys.elementAt(index);
                  final cartItem = cartProvider.items[productId]!;
                  final product = cartItem['product'];
                  final quantity = cartItem['quantity'];

                  return ListTile(
                    leading: Image.network(
                      product.imageUrl,
                      width: 50,
                      height: 50,
                      fit: BoxFit.cover,
                    ),
                    title: Text(product.name),
                    subtitle: Text(
                        '${product.price.toStringAsFixed(2)} ‚ÇΩ x $quantity'),
                  );
                },
              ),
            ),
            const SizedBox(height: 20),
            const Text(
              '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            Form(
              key: _formKey,
              child: Column(
                children: [
                  TextFormField(
                    decoration: const InputDecoration(labelText: '–í–∞—à–µ –∏–º—è'),
                    validator: (value) => value != null && value.isNotEmpty
                        ? null
                        : '–í–≤–µ–¥–∏—Ç–µ –∏–º—è',
                    onSaved: (value) => _name = value!,
                  ),
                  const SizedBox(height: 10),
                  TextFormField(
                    decoration: const InputDecoration(labelText: '–¢–µ–ª–µ—Ñ–æ–Ω'),
                    keyboardType: TextInputType.phone,
                    validator: (value) => value != null && value.length >= 10
                        ? null
                        : '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä',
                    onSaved: (value) => _phone = value!,
                  ),
                  const SizedBox(height: 10),
                  TextFormField(
                    decoration:
                        const InputDecoration(labelText: '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏'),
                    validator: (value) => value != null && value.isNotEmpty
                        ? null
                        : '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å',
                    onSaved: (value) => _address = value!,
                  ),
                  const SizedBox(height: 20),
                  SizedBox(
                    width: MediaQuery.of(context).size.width *
                        0.8, // 80% —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞
                    child: ElevatedButton(
                      onPressed: () => _submitOrder(context),
                      style: ElevatedButton.styleFrom(
                        padding: const EdgeInsets.symmetric(vertical: 12),
                        shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12)),
                        backgroundColor: Colors.blueAccent,
                      ),
                      child: const Text(
                        '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑',
                        style: TextStyle(color: Colors.white, fontSize: 18),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
