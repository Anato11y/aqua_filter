import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:aqua_filter/providers/cart_provider.dart';
import 'package:aqua_filter/screens/login_screen.dart';
import 'package:aqua_filter/services/yookassa_service.dart';
import 'package:url_launcher/url_launcher.dart';

class CheckoutScreen extends StatefulWidget {
  const CheckoutScreen({super.key});

  @override
  CheckoutScreenState createState() => CheckoutScreenState();
}

class CheckoutScreenState extends State<CheckoutScreen> {
  final _formKey = GlobalKey<FormState>();
  String _name = '';
  String _phone = '';
  String _address = '';
  String _deliveryMethod = '–ö—É—Ä—å–µ—Ä';
  bool _useBonuses = false;
  double _bonusToUse = 0.0;
  double _userBonusBalance = 0.0;
  bool _isProcessing = false;

  @override
  void initState() {
    super.initState();
    _loadUserBonuses();
  }

  /// ‚úÖ **–ó–∞–≥—Ä—É–∑–∫–∞ –±–æ–Ω—É—Å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
  Future<void> _loadUserBonuses() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user != null) {
      final userDoc = await FirebaseFirestore.instance
          .collection('users')
          .doc(user.uid)
          .get();
      setState(() {
        _userBonusBalance =
            (userDoc.data()?['bonusBalance'] as num?)?.toDouble() ?? 0.0;
      });
    }
  }

  /// ‚úÖ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏**
  Future<bool> _checkAuth() async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) {
      await Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => const AuthScreen()),
      );
      return FirebaseAuth.instance.currentUser != null;
    }
    return true;
  }

  /// ‚úÖ **–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞**
  Future<void> _submitOrder() async {
    if (!_formKey.currentState!.validate()) return;
    _formKey.currentState!.save();

    final cartProvider = Provider.of<CartProvider>(context, listen: false);
    final user = FirebaseAuth.instance.currentUser;

    if (user == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!')),
      );
      return;
    }

    setState(() => _isProcessing = true);
    try {
      double totalAmount = cartProvider.totalAmount;
      double bonusUsed = _useBonuses ? _bonusToUse : 0.0;
      double finalAmount = totalAmount - bonusUsed;
      double bonusEarned = totalAmount * 0.05;

      String? paymentUrl;
      if (finalAmount > 0) {
        print('üîπ –ó–∞–ø—É—Å–∫ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ YooKassa –Ω–∞ —Å—É–º–º—É $finalAmount ‚ÇΩ');
        paymentUrl = await YooKassaService.makePayment(finalAmount, 'RUB');
        if (paymentUrl == null) {
          throw Exception('–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ YooKassa');
        }
      }

      final orderData = {
        'userId': user.uid,
        'name': _name,
        'phone': _phone,
        'address': _deliveryMethod == '–ö—É—Ä—å–µ—Ä' ? _address : '–°–∞–º–æ–≤—ã–≤–æ–∑',
        'deliveryMethod': _deliveryMethod,
        'totalAmount': totalAmount,
        'bonusUsed': bonusUsed,
        'bonusEarned': bonusEarned,
        'finalAmount': finalAmount,
        'date': Timestamp.now(),
        'items': cartProvider.items.values.map((item) {
          return {
            'name': item['product'].name,
            'productId': item['product'].id,
            'price': item['product'].price,
            'quantity': item['quantity'],
          };
        }).toList(),
      };

      final orderRef =
          await FirebaseFirestore.instance.collection('orders').add(orderData);
      print('‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ orders/${orderRef.id}');

      final userRef =
          FirebaseFirestore.instance.collection('users').doc(user.uid);
      await userRef.update(
          {'bonusBalance': _userBonusBalance - bonusUsed + bonusEarned});
      print('‚úÖ –ë–æ–Ω—É—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: -$bonusUsed + $bonusEarned');

      cartProvider.clearCart();
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!')),
      );

      if (paymentUrl != null) {
        print('üîπ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã: $paymentUrl');
        final Uri paymentUri = Uri.parse(paymentUrl);
        if (await launchUrl(paymentUri, mode: LaunchMode.externalApplication)) {
          print('‚úÖ URL –æ—Ç–∫—Ä—ã—Ç —É—Å–ø–µ—à–Ω–æ');
        } else {
          print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É');
        }
      } else {
        Navigator.pop(context);
      }
    } catch (e, stackTrace) {
      print('‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: $e');
      print(stackTrace);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞: $e')),
      );
    } finally {
      setState(() => _isProcessing = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
            style: TextStyle(color: Colors.white)),
        backgroundColor: Colors.blueAccent,
        iconTheme: const IconThemeData(color: Colors.white),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            ListTile(
              title: const Text('–ö—É—Ä—å–µ—Ä'),
              leading: Radio(
                value: '–ö—É—Ä—å–µ—Ä',
                groupValue: _deliveryMethod,
                onChanged: (value) => setState(() => _deliveryMethod = value!),
              ),
            ),
            ListTile(
              title: const Text('–°–∞–º–æ–≤—ã–≤–æ–∑'),
              leading: Radio(
                value: '–°–∞–º–æ–≤—ã–≤–æ–∑',
                groupValue: _deliveryMethod,
                onChanged: (value) => setState(() => _deliveryMethod = value!),
              ),
            ),
            Form(
              key: _formKey,
              child: Column(
                children: [
                  TextFormField(
                    decoration: const InputDecoration(labelText: '–í–∞—à–µ –∏–º—è'),
                    validator: (value) =>
                        value!.isNotEmpty ? null : '–í–≤–µ–¥–∏—Ç–µ –∏–º—è',
                    onSaved: (value) => _name = value!,
                  ),
                  const SizedBox(height: 10),
                  TextFormField(
                    decoration: const InputDecoration(labelText: '–¢–µ–ª–µ—Ñ–æ–Ω'),
                    keyboardType: TextInputType.phone,
                    validator: (value) => value != null && value.length >= 10
                        ? null
                        : '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä',
                    onSaved: (value) => _phone = value!,
                  ),
                  if (_deliveryMethod == '–ö—É—Ä—å–µ—Ä')
                    TextFormField(
                      decoration:
                          const InputDecoration(labelText: '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏'),
                      validator: (value) =>
                          value!.isNotEmpty ? null : '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å',
                      onSaved: (value) => _address = value!,
                    ),
                ],
              ),
            ),
            SwitchListTile(
              title: Text(
                  '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã (–î–æ—Å—Ç—É–ø–Ω–æ: ${_userBonusBalance.toStringAsFixed(2)} ‚ÇΩ)'),
              value: _useBonuses,
              onChanged: (bool value) {
                setState(() {
                  _useBonuses = value;
                  _bonusToUse = _useBonuses ? _userBonusBalance : 0.0;
                });
              },
            ),
            const SizedBox(height: 20),
            Center(
              child: ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blueAccent,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  padding:
                      const EdgeInsets.symmetric(horizontal: 32, vertical: 12),
                ),
                onPressed: _isProcessing
                    ? null
                    : () async {
                        if (await _checkAuth()) _submitOrder();
                      },
                child: _isProcessing
                    ? const CircularProgressIndicator(color: Colors.white)
                    : const Text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑',
                        style: TextStyle(color: Colors.white)),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
